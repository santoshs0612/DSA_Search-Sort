We have to paint n boards of length {A1, A2â€¦An}. There are k painters available and each takes 1 unit of time to paint 1 unit of the board. The problem is to find the minimum time to get 
this job was done under the constraints that any painter will only paint continuous sections of boards, say board {2, 3, 4} or only board {1} or nothing but not board {2, 4, 5}.

Examples: 

Input : k = 2, A = {10, 10, 10, 10} 
Output : 20
Explanation: Here we can divide the boards into 2 equal sized partitions, so each painter gets 20 units of board and the total time taken is 20. 

Input : k = 2, A = {10, 20, 30, 40} 
Output : 60
Explanation: Here we can divide first 3 boards for one painter and the last board for second painter.



bool ispossible(int val,vector<int> &arr,int k)
{
    int painter =1,board=0;
    for(int i=0;i<arr.size();i++)
    {
        if(arr[i]>val)
        {
            return false;
        }
        if(board+arr[i]> val)
        {
            painter++;
            board=arr[i];
        }
        else 
        {
            board+=arr[i];
        }
    }
    if(painter>k)
    {
        return false;
    }
    else{
        return true;
    }
}


int findLargestMinDistance(vector<int> &arr, int k)
{
    //    Write your code here.


    int low=0,high=0,n=arr.size(),res=-1;

    for(int i=0;i<n;i++)
    {
        high+=arr[i];
    }

    while(low<=high)
    {

        int mid= low+(high-low)/2;

        if(ispossible(mid,arr,k))
        {
            res= mid;
            high=mid-1;
        }
        else 
        {
            low=mid+1;
        }
    }
}
