Given an array of integers and another number. Find all the unique quadruple from the given array that sums up to the given number.

Example 1:

Input:
N = 5, K = 3
A[] = {0,0,2,1,1}
Output: 0 0 1 2 $
Explanation: Sum of 0, 0, 1, 2 is equal
to K.
Example 2:

Input:
N = 7, K = 23
A[] = {10,2,3,4,5,7,8}
Output: 2 3 8 10 $2 4 7 10 $3 5 7 8 $
Explanation: Sum of 2, 3, 8, 10 = 23,
sum of 2, 4, 7, 10 = 23 and sum of 3,
5, 7, 8 = 23.
Your Task:


// User function template for C++

class Solution{
    public:
    // arr[] : int input array of integers
    // k : the quadruple sum required
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
        // Your code goes here
        
        
        vector<vector<int>> ans;
        vector<int> temp(4,0);
        sort(arr.begin(),arr.end());
        
        int n= arr.size();
        
        for(int i=0;i<n-3;i++)
        {
            for(int j=i+1;j<n-2;j++)
            {
                
                int l=j+1;
                int r=n-1;
                
                while(l<r)
                {
                    
                    if(arr[i]+arr[j]+arr[l]+arr[r]==k)
                    {
                        temp[0]=arr[i];
                        temp[1]=arr[j];
                        temp[2]=arr[l];
                        temp[3]=arr[r];
                        ans.push_back(temp);
                        // l++;
                        // r--;
                        while(l<r && arr[l]==temp[2])
                        {
                            l++;
                        }
                        while(l<r && arr[r]==temp[3])
                        {
                            r--;
                        }
                        
                    }
                    else if(arr[i]+arr[j]+arr[l]+arr[r]<k)
                    {
                        l++;
                    }
                    else {
                        r--;
                    }
                }
                
                while(j+1<n && arr[j+1]==arr[j])
                {
                    j++;
                }
            }
           while(i+1<n && arr[i+1]==arr[i])
           {
               i++;
           }
        }
        return ans;
        
    }
};
