Given a set of coordinates points of the form [p, q] and a line L of the form ax + by + c = 0. The task is to find a point on a given line for which the sum of distances from a given set of coordinates is minimum. 
 

Example 1:

Input:
L = {1, -1, 3}
points[] = {{-3, 2}, {-1, 0}, 
            {-1, 2}, {1, 2}, {3, 4}}
Output: 20.77
Explanation: In above figure optimum location of 
point of x - y - 3 = 0 line is (2, -1), whose 
total distance with other points is 20.77, 
which is minimum obtainable total distance.


Example 2:

Input:
L = {2, 1, 4}
points[] = {{-1, 2}, {1, 3},{2, 4}}
Output: 11.20


//User function Template for C++

#define sq(x) ((x)*(x))
#define EPS 1e-6
class Solution{
    public:
    // computing distance front a point 
    double dist(double x, double y, pair<int,int>p)
    {
        return sqrt(sq(x-p.first) +sq(y-p.second));
    }
    // computing a total distance from all point 
    double comptotdis(vector<pair<int,int>> &p,int n,tuple<int,int,int>l,double x )
    {
        double res =0;
        double y= -1*(get<2>(l)+get<0>(l)*x)/(get<1>(l));
        
        for(int i=0;i<n;i++)
        {
            res+=dist(x,y,p[i]);
        }
        return res;
    }
    double findOptimumCost(tuple<int,int,int>l, vector<pair<int,int>>p, int n){
	    //Write your code here
	    double low= -1e6;
	    double high= 1e6;
	    
	    while((high-low)>EPS)
	    {
	        double mid1= low+ (high-low)/3;
	        double mid2= high-(high-low)/3;
	        
	        
	        double dist1= comptotdis(p,n,l,mid1);
	        double dist2= comptotdis(p,n,l,mid2);
	        
	        if(dist1<dist2)
	        {
	            high=mid2;
	        }
	        else 
	        {
	            low=mid1;
	        }
	        
	    }
	    
	    return comptotdis(p,n,l,(low+high)/2);
	    
	    
    }
};
