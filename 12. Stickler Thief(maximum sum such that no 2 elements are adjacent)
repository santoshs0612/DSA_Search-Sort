Stickler the thief wants to loot money from a society having n houses in a single line. He is a weird person and follows a certain rule when looting the houses. According to the rule, he will never loot two consecutive houses. At the same time, he wants to maximize the amount he loots. The thief knows which house has what amount of money but is unable to come up with an optimal looting strategy. He asks for your help to find the maximum money he can get if he strictly follows the rule. Each house has a[i]amount of money present in it.

Example 1:

Input:
n = 6
a[] = {5,5,10,100,10,5}
Output: 110
Explanation: 5+100+5=110
Example 2:

Input:
n = 3
a[] = {1,2,3}
Output: 4
Explanation: 1+3=4

class Solution
{
    public:
    //Function to find the maximum money the thief can get.
    int solver_Rec(int n,int arr[])
    {
        if(n==0)
        {
            return arr[0];
        }
        if(n<0)
        {
            return 0;
        }
        
        int take = arr[n]+solver_Rec(n-2,arr);
        int not_take= 0+solver_Rec(n-1,arr);
        
        return max(take,not_take);
    }
    int solver_Mem(int n,int arr[],vector<int> &dp)
    {
        if(n==0)
        {
            return arr[0];
        }
        if(n<0)
        {
            return 0;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        
        int take = arr[n]+solver_Mem(n-2,arr,dp);
        int not_take= 0+solver_Mem(n-1,arr,dp);
        
        return dp[n]=max(take,not_take);
    }
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        
        //////////////////
        // Recursion 
        /////////////////
        
        //return solver_Rec(n-1,arr);
        
        ///////////////////
        // Memorization 
        ///////////////////
        
        // vector<int> dp(n,-1);
        
        // return solver_Mem(n-1,arr,dp);
        
        
        /////////////////////
        // Tabulation Bottom Up
        ///////////////////////
        
        //Initialization 
        // vector<int> dp(n);
        // dp[0]=arr[0];
        
        // for(int i=1;i<n;i++)
        // {
        //     int take = arr[i];
        //     if(i>1)
        //     {
        //         take+=dp[i-2];
        //     }
        //     int not_take= dp[i-1]+0;
            
        //     dp[i]= max(take,not_take);
        // }
        // return dp[n-1];
        
        ///////////////////////////
        // Tabulation with Optimization 
        ///////////////////////////////
        
        int prev_1=arr[0];
        int prev_2=0;
        int curr;
        for(int i=1;i<n;i++)
        {
            int take = arr[i];
            if(i>1)
            {
                take+=prev_2;
            }
            int not_take= prev_1+0;
            curr= max(take,not_take);
            prev_2=prev_1;
            prev_1=curr;
        }
        return prev_1;
    }
};
