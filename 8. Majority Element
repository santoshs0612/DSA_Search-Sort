Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.
 

Example 1:

Input:
N = 3 
A[] = {1,2,3} 
Output:
-1
Explanation:
Since, each element in 
{1,2,3} appears only once so there 
is no majority element.
Example 2:

Input:
N = 5 
A[] = {3,1,3,3,2} 
Output:
3
Explanation:
Since, 3 is present more
than N/2 times, so it is 
the majority element.





//User function template for C++

class Solution{
  public:
     // Function to find majority element in the array
    // a: input array
    // size: size of input array
    int majorityElement(int a[], int size)
    {
        
        // your code here
// O(N)+O(N)
        // int count{0};
        // int max_count{0};
        // unordered_map<int,int> m;
        
        // for(int i=0;i<size;i++)
        // {
        //     m[a[i]]++;
        // }
        
        // for(auto i= m.begin();i!=m.end();i++)
        // {
        //     int temp = i->second;
        //     if(temp>size/2)
        //     {
        //         return i->first;
        //     }
        // }
        // return -1;

// O(N)+O(1)
//(Using Mooreâ€™s Voting Algorithm):   
        int maj_ele=a[0];
        int c=1;
        
        for(int i=1;i<size;i++)
        {
            if(maj_ele==a[i])
            {
                c++;
            }
            else
            {
                c--;
            }
            
            if(c==0)
            {
                maj_ele=a[i];
                c=1;
            }
        }
        //int maj_val=a[maj_ele];
        int count=0;
        
        for(int i=0;i<size;i++)
        {
            if(maj_ele==a[i])
            {
                count++;
            }
        }
        
        if(count > size / 2)
        {
            return maj_ele;
        }
        else 
        {
            return -1;
        }
        
        
        
    }
};
