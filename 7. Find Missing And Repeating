
Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2,....,N} is missing and one number 'B' occurs twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.










class Solution{
public:
    int *findTwoElement(int *arr, int n) {
        // code here\
        // O(N)+O(N)
        // vector<int> dup(n,0);
        // int rep=0,miss=0;
        // ///find the repeating
        // for(int i=0;i<n;i++)
        // {
        //     if(dup[arr[i]-1]==0)
        //     {
        //         dup[arr[i]-1]=1;
        //     }
        //     else 
        //     {
        //         rep = arr[i];
        //         //break;
        //     }
        // }
        // for(int i=0;i<n;i++)
        // {
        //     if(dup[i]==0)
        //     {
        //         miss=i+1;
        //         break;
        //     }
        //     else {
        //         continue;
        //     }
        // }
        // arr[0]=rep;
        // arr[1]=miss;
        // return arr;
        
        // O(N)+O(1)
        int rep=0,miss=0;
        ///find the repeating
        for(int i=0;i<n;i++)
        {
            if(arr[abs(arr[i])-1]>0)
            {
                arr[abs(arr[i])-1]=-1*arr[abs(arr[i])-1];
            }
            else 
            {
                rep = abs(arr[i]);
                //break;
            }
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>0)
            {
                miss=i+1;
                break;
            }
            else {
                continue;
            }
        }
        arr[0]=rep;
        arr[1]=miss;
        return arr;
        
        
    }
};
