Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kth position of the final sorted array.
 

Example 1:

Input:
arr1[] = {2, 3, 6, 7, 9}
arr2[] = {1, 4, 8, 10}
k = 5
Output:
6
Explanation:
The final sorted array would be -
1, 2, 3, 4, 6, 7, 8, 9, 10
The 5th element of this array is 6.
Example 2:
Input:
arr1[] = {100, 112, 256, 349, 770}
arr2[] = {72, 86, 113, 119, 265, 445, 892}
k = 7
Output:
256
Explanation:
Final sorted array is - 72, 86, 100, 112,
113, 119, 256, 265, 349, 445, 770, 892
7th element of this array is 256.


class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        
        
        
        /// O(nlon(n))+O(1)
        
        // int i=n-1,j=0;
        // // rearranging the array 
        // while(i>=0 && j<m)
        // {
            
        //     if(arr1[i]>=arr2[j])
        //     {
                
        //         swap(arr1[i],arr2[j]);
        //     }
        //     i--;
        //     j++;
        // }
        // // sort after rearranging 
        // sort(arr1,arr1+n);
        // sort(arr2,arr2+m);
        
        // // return the element for array 
        // if(k<=n)
        // {
        //     return arr1[k-1];
        // }
        // else {
        //     return arr2[k-n-1];
        // }
        
        // O(K) +O(1)
        
        // int i=0,j=0;
        // int pos=0;
        
        // // case for incrementing pos with comparision 
        // while(i<n && j<m)
        // {
        //     // if arr1 is less pos++ and if equql return value 
        //     if(arr1[i]<arr2[j])
        //     {
        //         pos++;
        //         if(pos==k)
        //         {
        //             return arr1[i];
        //         }
        //         i++;
                
        //     }
        //     else if(arr1[i]>= arr2[j])
        //     {
        //         pos++;
        //         if(pos==k)
        //         {
        //             return arr2[j];
        //         }
        //         j++;
                
        //     }
        // }
        
        // // if m is ended we have to check 
        // while(i<n)
        // {
        //     pos++;
        //     if(pos==k)
        //     {
        //         return arr1[i];
        //     }
        //     i++;
            
        // }
        // // if n ended and still not found the pos 
        // while(j<m)
        // {
        //     pos++;
        //     if(pos==k)
        //     {
        //         return arr2[j];
        //     }
        //     j++;
            
        // }
        
        // O(log(N+M))+O(1)
        
        if(n>m)
        {
            return kthElement(arr2,arr1,m,n,k);
        }
        
        int low= max(0,k-m), high= min(k,n);
        
        while(low<=high)
        {
            int mid1= (low+high)/2;
            int mid2= k-mid1;
            
            int l1= mid1==0?INT_MIN:arr1[mid1-1];
            int l2= mid2==0?INT_MIN:arr2[mid2-1];
            int r1= mid1==n?INT_MAX:arr1[mid1];
            int r2= mid2==m?INT_MAX:arr2[mid2];
            
            if(l1<=r2 && l2<=r1)
            {
                return max(l1,l2);
            }
            else if(l1>r2)
            {
                high=mid1-1;
            }
            else{
                low=mid1+1;
            }
        }
        return 1;
        
    }
};
