You have N books, each with Ai number of pages. M students need to be allocated contiguous books, with each student getting at least one book. Out of all the permutations, the goal is to find the permutation where the student with the most pages allocated to him gets the minimum number of pages, out of all possible permutations.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

 

Example 1:

Input:
N = 4
A[] = {12,34,67,90}
M = 2
Output:113
Explanation:Allocation can be done in 
following ways:
{12} and {34, 67, 90} Maximum Pages = 191
{12, 34} and {67, 90} Maximum Pages = 157
{12, 34, 67} and {90} Maximum Pages =113.
Therefore, the minimum of these cases is 113,
which is selected as the output.

Example 2:

Input:
N = 3
A[] = {15,17,20}
M = 2
Output:32
Explanation: Allocation is done as
{15,17} and {20}

//User function template in C++

class Solution 
{
    public:
   bool isPossAllocatio(int arr[], int posval,int M,int n)
   {
       int student=1,pages=0;
       
       // checking with allocating the bookes to each student 
       for(int i=0;i<n;i++)
       {
           
           if(arr[i]>posval)
           {
               return false;
           }
           if(pages+arr[i]>posval)
           {
               student++;
               pages=arr[i];
           }
           else {
               pages+=arr[i];
           }
       }
       
       //if student no more return false 
       if(student>M)
       {
           return false;
       }
       else{
           return true;
       }
       
       
   }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        //code here
        if(N<M)
        {
            return -1;
        }
        int min_ele=INT_MAX,sum=0;
        for(int i=0;i<N;i++)
        {
            min_ele= min(min_ele,A[i]);
            sum+=A[i];
        }
        // Applying BS on interval of minelement to totala sum 
        int low= min_ele, high= sum,res=-1;
        
        while(low<=high)
        {
            int mid= (high+low)>>1;
            
            // function to check allocation posssible 
            if(isPossAllocatio(A,mid,M,N))
            {
                res=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return res;
    }
};
