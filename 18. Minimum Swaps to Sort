Given an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.


Example 1:

Input:
nums = {2, 8, 5, 4}
Output:
1
Explaination:
swap 8 with 4.
Example 2:

Input:
nums = {10, 19, 6, 3, 5}
Output:
2
Explaination:
swap 10 with 3 and swap 19 with 5.




class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&arr)
	{
	    // Code here
	    int n= arr.size();
	    int count=0;
	    // Mapping the number with index 
	    unordered_map<int,int> mp;
	    for(int i=0;i<n;i++)
	    {
	        mp[arr[i]]=i;
	    }
	    
	    // sort the array 
	    sort(arr.begin(),arr.end());
	    // making of visited array for marking visited pair 
	    vector<bool> vis(n,0);
	    
	    for(int i=0;i<n;i++)
	    {
	        // if visited or element not swaped 
	        if(vis[i]==true || mp[arr[i]]==i)
	        {
	            continue;
	        }
	        else 
	        {
	            int j=i,swap=0;
	            
	            // operation for every swap pair 
	            while(!vis[j])
	            {
	                vis[j]=true;
	                swap++;
	                j = mp[arr[j]];
	            }
	            // count for one pair 
	            if(swap>0)
	            {
	                count+=swap-1;
	            }
	        }
	    }
	    return count;
	}
};
